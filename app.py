"""·ª®ng d·ª•ng AI Document Analyzer s·ª≠ d·ª•ng Streamlit"""

import streamlit as st
import time
import logging
import re
import os
from datetime import datetime

from src.utils.file_loader import load_file
from src.utils.web_scraper import scrape_url
from src.core.summarizer import summarize
from src.core.qa import answer_question
from src.ui.layout import render_layout
from src.ui.components import (
    display_logo, info_card, success_box, info_box, error_box,
    file_stats_display, qa_result, progress_steps, enhanced_sidebar_info, custom_metric
)
from src.config import APP_CONFIG

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title=APP_CONFIG["name"],
    page_icon="üìë",
    layout="wide",
    initial_sidebar_state="expanded"
)

# √Åp d·ª•ng CSS t√πy ch·ªânh
render_layout()

# Kh·ªüi t·∫°o session state
if 'text' not in st.session_state:
    st.session_state.text = ""
if 'summary' not in st.session_state:
    st.session_state.summary = ""
if 'file_name' not in st.session_state:
    st.session_state.file_name = ""
if 'processing_complete' not in st.session_state:
    st.session_state.processing_complete = False
if 'current_step' not in st.session_state:
    st.session_state.current_step = 0
if 'start_time' not in st.session_state:
    st.session_state.start_time = None

# Sidebar v·ªõi logo v√† th√¥ng tin
with st.sidebar:
    display_logo(width=180)
    st.markdown("---")

    # S·ª≠ d·ª•ng component m·ªõi cho th√¥ng tin app
    enhanced_sidebar_info()

    # Input lo·∫°i d·ªØ li·ªáu v·ªõi styling m·ªõi
    st.markdown("""
    <div style="
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        backdrop-filter: blur(10px);
    ">
        <h3 style="color: white; margin-bottom: 1rem; text-align: center;">üìå Ngu·ªìn d·ªØ li·ªáu</h3>
    </div>
    """, unsafe_allow_html=True)
    
    input_type = st.radio(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu",
        options=["T·∫£i l√™n t√†i li·ªáu", "Nh·∫≠p URL Website", "Nh·∫≠p vƒÉn b·∫£n tr·ª±c ti·∫øp"],
        index=0,
        key="input_type_radio",
        label_visibility="collapsed"
    )

    # Th√¥ng tin v·ªÅ d·ªØ li·ªáu hi·ªán t·∫°i v·ªõi styling m·ªõi
    if st.session_state.text:
        st.markdown("""
        <div style="
            background: rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        ">
            <h3 style="color: white; margin-bottom: 1rem; text-align: center;">üìä Th√¥ng tin t√†i li·ªáu</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # S·ª≠ d·ª•ng custom metrics
        # T√≠nh to√°n stats
        word_count = len(st.session_state.text.split())
        char_count = len(st.session_state.text)
        
        # Hi·ªÉn th·ªã metrics trong sidebar
        st.markdown(f"""
        <div style="
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            color: white;
        ">
            <div style="font-size: 0.9rem; opacity: 0.9; margin-bottom: 0.5rem;">üìÑ Ngu·ªìn</div>
            <div style="font-weight: 600; word-break: break-word;">{st.session_state.file_name}</div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            color: white;
            text-align: center;
        ">
            <div style="font-size: 0.9rem; opacity: 0.9; margin-bottom: 0.5rem;">üìù S·ªë t·ª´</div>
            <div style="font-weight: 700; font-size: 1.5rem;">{word_count:,}</div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            color: white;
            text-align: center;
        ">
            <div style="font-size: 0.9rem; opacity: 0.9; margin-bottom: 0.5rem;">üìä K√Ω t·ª±</div>
            <div style="font-weight: 700; font-size: 1.5rem;">{char_count:,}</div>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.start_time:
            elapsed_time = time.time() - st.session_state.start_time
            st.markdown(f"""
            <div style="
                background: rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                padding: 1rem;
                margin-bottom: 1rem;
                color: white;
                text-align: center;
            ">
                <div style="font-size: 0.9rem; opacity: 0.9; margin-bottom: 0.5rem;">‚è±Ô∏è Th·ªùi gian</div>
                <div style="font-weight: 700; font-size: 1.5rem;">{elapsed_time:.1f}s</div>
            </div>
            """, unsafe_allow_html=True)

    st.markdown("---")
    
    # Footer v·ªõi styling m·ªõi
    st.markdown(f"""
    <div style="
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1rem;
        text-align: center;
        color: white;
        margin-top: 2rem;
    ">
        <div style="font-size: 0.9rem; margin-bottom: 0.5rem;">
            <strong>Phi√™n b·∫£n:</strong> {APP_CONFIG['version']}
        </div>
        <div style="font-size: 0.8rem; opacity: 0.8;">
            ¬© {datetime.now().year} {APP_CONFIG['name']}
        </div>
    </div>
    """, unsafe_allow_html=True)

# Ph·∫ßn ch√≠nh
st.markdown("<h1 class='main-title'>üìÑ AI Document Analyzer</h1>", unsafe_allow_html=True)

# Hi·ªÉn th·ªã c√°c b∆∞·ªõc x·ª≠ l√Ω
process_steps = [
    {"name": "Nh·∫≠p d·ªØ li·ªáu", "description": "T·∫£i l√™n t√†i li·ªáu ho·∫∑c nh·∫≠p URL/vƒÉn b·∫£n"},
    {"name": "T√≥m t·∫Øt", "description": "AI ph√¢n t√≠ch v√† t√≥m t·∫Øt n·ªôi dung"},
    {"name": "H·ªèi ƒë√°p", "description": "ƒê·∫∑t c√¢u h·ªèi v·ªÅ n·ªôi dung"}
]

progress_steps(process_steps, st.session_state.current_step)

# Container ch√≠nh
main_container = st.container()
with main_container:
    # T·∫°o tabs
    input_tab, summary_tab, qa_tab = st.tabs(["üì§ Nh·∫≠p d·ªØ li·ªáu", "üìù T√≥m t·∫Øt", "‚ùì H·ªèi ƒë√°p"])

    # Tab nh·∫≠p d·ªØ li·ªáu
    with input_tab:
        st.markdown("<h2>Nh·∫≠p d·ªØ li·ªáu</h2>", unsafe_allow_html=True)

        col1, col2 = st.columns([3, 1])

        with col1:
            # Logic x·ª≠ l√Ω input d·ª±a tr√™n lo·∫°i ƒë√£ ch·ªçn
            if input_type == "T·∫£i l√™n t√†i li·ªáu":
                st.markdown("<h3>T·∫£i l√™n t√†i li·ªáu</h3>", unsafe_allow_html=True)
                info_box("H·ªó tr·ª£ file <strong>PDF</strong> v√† <strong>Word (.docx)</strong> v·ªõi k√≠ch th∆∞·ªõc t·ªëi ƒëa 50MB.")

                file = st.file_uploader("Ch·ªçn file", type=["pdf", "docx"], key="file_uploader")

                if file:
                    st.session_state.file_name = file.name

                    if st.button("X·ª≠ l√Ω t√†i li·ªáu", key="process_file", use_container_width=True):
                        st.session_state.start_time = time.time()
                        with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh x·ª≠ l√Ω
                            progress_bar = st.progress(0)
                            for i in range(100):
                                time.sleep(0.02)
                                progress_bar.progress(i + 1)

                            st.session_state.text = load_file(file)
                            if st.session_state.text and not st.session_state.text.startswith("L·ªói"):
                                st.session_state.current_step = 1  # C·∫≠p nh·∫≠t b∆∞·ªõc
                                success_box(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng: <strong>{file.name}</strong>")
                                st.balloons()
                            else:
                                error_box(f"‚ùå {st.session_state.text}")

            elif input_type == "Nh·∫≠p URL Website":
                st.markdown("<h3>Ph√¢n t√≠ch Website</h3>", unsafe_allow_html=True)
                info_box("Nh·∫≠p URL website ƒë·ªÉ tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung.")

                url = st.text_input("Nh·∫≠p URL website", placeholder="https://example.com", key="url_input")

                if url:
                    if st.button("Tr√≠ch xu·∫•t n·ªôi dung", key="extract_url", use_container_width=True):
                        st.session_state.start_time = time.time()
                        with st.spinner("ƒêang tr√≠ch xu·∫•t n·ªôi dung t·ª´ website..."):
                            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh x·ª≠ l√Ω
                            progress_bar = st.progress(0)
                            for i in range(100):
                                time.sleep(0.01)
                                progress_bar.progress(i + 1)

                            st.session_state.text = scrape_url(url)
                            st.session_state.file_name = url

                            if st.session_state.text and not st.session_state.text.startswith("L·ªói"):
                                st.session_state.current_step = 1  # C·∫≠p nh·∫≠t b∆∞·ªõc
                                success_box(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng t·ª´: <strong>{url}</strong>")
                            else:
                                error_box(f"‚ùå {st.session_state.text}")

            elif input_type == "Nh·∫≠p vƒÉn b·∫£n tr·ª±c ti·∫øp":
                st.markdown("<h3>Nh·∫≠p vƒÉn b·∫£n</h3>", unsafe_allow_html=True)
                info_box("Nh·∫≠p ho·∫∑c d√°n vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch v√†o khung b√™n d∆∞·ªõi.")

                text_input = st.text_area(
                    "VƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch",
                    height=300,
                    placeholder="D√°n n·ªôi dung vƒÉn b·∫£n v√†o ƒë√¢y...",
                    key="direct_text_input"
                )

                if text_input:
                    if st.button("S·ª≠ d·ª•ng vƒÉn b·∫£n n√†y", key="use_text", use_container_width=True):
                        st.session_state.start_time = time.time()
                        st.session_state.text = text_input
                        st.session_state.file_name = "VƒÉn b·∫£n nh·∫≠p tr·ª±c ti·∫øp"
                        st.session_state.current_step = 1  # C·∫≠p nh·∫≠t b∆∞·ªõc
                        success_box("‚úÖ ƒê√£ nh·∫≠n vƒÉn b·∫£n!")

        with col2:
            st.markdown("<h3>Xem tr∆∞·ªõc</h3>", unsafe_allow_html=True)
            if st.session_state.text:
                # Hi·ªÉn th·ªã m·∫´u vƒÉn b·∫£n
                st.markdown("**M·∫´u n·ªôi dung:**")
                st.markdown("""
                <div class="preview-container">
                {}
                </div>
                """.format(st.session_state.text[:1000] + "..." if len(st.session_state.text) > 1000 else st.session_state.text), 
                unsafe_allow_html=True)
            else:
                info_box("Ch∆∞a c√≥ n·ªôi dung. Vui l√≤ng nh·∫≠p d·ªØ li·ªáu t·ª´ m·ªôt trong c√°c ngu·ªìn b√™n tr√°i.")

    # Tab t√≥m t·∫Øt
    with summary_tab:
        st.markdown("""
        <div class="fade-in-up">
            <h2 style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 1.5rem;
                text-align: center;
            ">üìù T√≥m t·∫Øt n·ªôi dung</h2>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.text:
            col1, col2 = st.columns([3, 1])

            with col1:
                # Enhanced styling cho c√†i ƒë·∫∑t t√≥m t·∫Øt
                st.markdown("""
                <div class="card fade-in-up" style="
                    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
                    border-radius: 20px;
                    padding: 2rem;
                    border: 1px solid #e3f2fd;
                    margin-bottom: 2rem;
                    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
                ">
                    <h3 style="
                        color: #1565c0;
                        font-weight: 700;
                        margin-bottom: 1.5rem;
                        display: flex;
                        align-items: center;
                    ">
                        <span style="margin-right: 0.75rem; font-size: 1.5rem;">‚öôÔ∏è</span>
                        C√†i ƒë·∫∑t t√≥m t·∫Øt
                    </h3>
                </div>
                """, unsafe_allow_html=True)

                length_options = {
                    "short": "Ng·∫Øn g·ªçn (ch·ªâ ƒëi·ªÉm ch√≠nh)",
                    "medium": "Trung b√¨nh (c√¢n ƒë·ªëi)",
                    "long": "Chi ti·∫øt (ƒë·∫ßy ƒë·ªß th√¥ng tin)"
                }

                length = st.select_slider(
                    "ƒê·ªô d√†i t√≥m t·∫Øt",
                    options=list(length_options.keys()),
                    value="medium",
                    format_func=lambda x: length_options[x]
                )

                info_card(
                    "H∆∞·ªõng d·∫´n ch·ªçn ƒë·ªô d√†i",
                    "‚ú® <strong>Ng·∫Øn g·ªçn:</strong> ~50 t·ª´ - Ch·ªâ √Ω ch√≠nh<br>üéØ <strong>Trung b√¨nh:</strong> ~150 t·ª´ - C√¢n ƒë·ªëi chi ti·∫øt<br>üìñ <strong>Chi ti·∫øt:</strong> ~300 t·ª´ - ƒê·∫ßy ƒë·ªß th√¥ng tin",
                    icon="üìè"
                )

                if st.button("üöÄ T·∫°o b·∫£n t√≥m t·∫Øt", key="generate_summary", use_container_width=True):
                    st.session_state.start_time = time.time()
                    with st.spinner("ü§ñ AI ƒëang ph√¢n t√≠ch v√† t√≥m t·∫Øt n·ªôi dung..."):
                        # Enhanced progress bar
                        progress_container = st.container()
                        with progress_container:
                            progress_text = st.empty()
                            progress_bar = st.progress(0)
                            
                            steps = ["Ph√¢n t√≠ch vƒÉn b·∫£n...", "Tr√≠ch xu·∫•t √Ω ch√≠nh...", "T·∫°o b·∫£n t√≥m t·∫Øt...", "Ho√†n th√†nh!"]
                            
                            for i in range(100):
                                step_index = min(i // 25, len(steps) - 1)
                                progress_text.markdown(f"**{steps[step_index]}** ({i+1}%)")
                                time.sleep(0.03)
                                progress_bar.progress(i + 1)

                        st.session_state.summary = summarize(st.session_state.text, length)
                        st.session_state.summary_length = length
                        st.session_state.current_step = 2  # C·∫≠p nh·∫≠t b∆∞·ªõc
                        st.success("üéâ T√≥m t·∫Øt ho√†n th√†nh!")
                        st.balloons()

            with col2:
                # Enhanced info panel
                st.markdown("""
                <div class="card fade-in-up" style="
                    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
                    border-radius: 20px;
                    padding: 2rem;
                    border: 1px solid #66bb6a;
                    margin-bottom: 2rem;
                    box-shadow: 0 12px 24px rgba(76, 175, 80, 0.2);
                ">
                    <h3 style="
                        color: #1b5e20;
                        font-weight: 700;
                        margin-bottom: 1.5rem;
                        display: flex;
                        align-items: center;
                    ">
                        <span style="margin-right: 0.75rem; font-size: 1.5rem;">üìä</span>
                        Th√¥ng tin
                    </h3>
                </div>
                """, unsafe_allow_html=True)
                
                if 'summary_length' in st.session_state:
                    # Display current settings
                    st.markdown(f"""
                    <div style="
                        background: rgba(255, 255, 255, 0.8);
                        border-radius: 12px;
                        padding: 1rem;
                        margin-bottom: 1rem;
                        border: 1px solid #c8e6c9;
                    ">
                        <div style="font-size: 0.9rem; color: #2e7d32; margin-bottom: 0.5rem; font-weight: 600;">üéöÔ∏è C·∫•p ƒë·ªô</div>
                        <div style="color: #1b5e20; font-weight: 700;">{length_options[st.session_state.summary_length]}</div>
                    </div>
                    """, unsafe_allow_html=True)

                    if st.session_state.summary:
                        words_count = len(st.session_state.summary.split())
                        compression_ratio = 1 - (words_count / len(st.session_state.text.split()))
                        
                        st.markdown(f"""
                        <div style="
                            background: rgba(255, 255, 255, 0.8);
                            border-radius: 12px;
                            padding: 1rem;
                            margin-bottom: 1rem;
                            border: 1px solid #c8e6c9;
                        ">
                            <div style="font-size: 0.9rem; color: #2e7d32; margin-bottom: 0.5rem; font-weight: 600;">üìù S·ªë t·ª´</div>
                            <div style="color: #1b5e20; font-weight: 700; font-size: 1.3rem;">{words_count:,}</div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        st.markdown(f"""
                        <div style="
                            background: rgba(255, 255, 255, 0.8);
                            border-radius: 12px;
                            padding: 1rem;
                            margin-bottom: 1rem;
                            border: 1px solid #c8e6c9;
                        ">
                            <div style="font-size: 0.9rem; color: #2e7d32; margin-bottom: 0.5rem; font-weight: 600;">üóúÔ∏è T·ª∑ l·ªá n√©n</div>
                            <div style="color: #1b5e20; font-weight: 700; font-size: 1.3rem;">{compression_ratio:.1%}</div>
                        </div>
                        """, unsafe_allow_html=True)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ t√≥m t·∫Øt v·ªõi enhanced styling
            if st.session_state.summary:
                st.markdown("""
                <div class="fade-in-up">
                    <h3 style="
                        color: #1565c0;
                        font-weight: 700;
                        margin: 2rem 0 1rem 0;
                        display: flex;
                        align-items: center;
                    ">
                        <span style="margin-right: 0.75rem; font-size: 1.5rem;">‚ú®</span>
                        K·∫øt qu·∫£ t√≥m t·∫Øt
                    </h3>
                </div>
                """, unsafe_allow_html=True)
                
                # Enhanced result display
                st.markdown(f"""
                <div class="fade-in-up" style="
                    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
                    border-radius: 20px;
                    padding: 2rem;
                    border: 1px solid #66bb6a;
                    margin-bottom: 2rem;
                    box-shadow: 0 12px 24px rgba(76, 175, 80, 0.2);
                ">
                    <div style="
                        background: white;
                        border-radius: 15px;
                        padding: 1.5rem;
                        line-height: 1.8;
                        font-size: 1.1rem;
                        color: #2c3e50;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                    ">
                        {st.session_state.summary}
                    </div>
                </div>
                """, unsafe_allow_html=True)

                # Enhanced download section
                col1, col2, col3 = st.columns([1, 1, 2])
                with col1:
                    st.download_button(
                        label="üì• T·∫£i TXT",
                        data=st.session_state.summary,
                        file_name=f"tomtat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        mime="text/plain",
                        use_container_width=True
                    )
                with col2:
                    # Option to copy to clipboard
                    if st.button("üìã Sao ch√©p", use_container_width=True):
                        st.success("‚úÖ ƒê√£ sao ch√©p v√†o clipboard!")
        else:
            error_box("‚ö†Ô∏è Vui l√≤ng nh·∫≠p d·ªØ li·ªáu ·ªü tab 'Nh·∫≠p d·ªØ li·ªáu' tr∆∞·ªõc khi t√≥m t·∫Øt.")

    # Tab h·ªèi ƒë√°p v·ªõi enhanced styling
    with qa_tab:
        st.markdown("""
        <div class="fade-in-up">
            <h2 style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 1.5rem;
                text-align: center;
            ">‚ùì H·ªèi ƒë√°p th√¥ng minh</h2>
        </div>
        """, unsafe_allow_html=True)

        if st.session_state.summary:
            # Enhanced question input section
            st.markdown("""
            <div class="card fade-in-up" style="
                background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
                border-radius: 20px;
                padding: 2rem;
                border: 1px solid #e3f2fd;
                margin-bottom: 2rem;
                box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
            ">
                <h3 style="
                    color: #1565c0;
                    font-weight: 700;
                    margin-bottom: 1.5rem;
                    display: flex;
                    align-items: center;
                ">
                    <span style="margin-right: 0.75rem; font-size: 1.5rem;">üó£Ô∏è</span>
                    ƒê·∫∑t c√¢u h·ªèi v·ªÅ n·ªôi dung
                </h3>
            </div>
            """, unsafe_allow_html=True)

            # Hi·ªÉn th·ªã n·ªôi dung t√≥m t·∫Øt v·ªõi enhanced styling
            with st.expander("üìñ Xem l·∫°i b·∫£n t√≥m t·∫Øt", expanded=False):
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                    border-radius: 15px;
                    padding: 1.5rem;
                    line-height: 1.7;
                    color: #2c3e50;
                ">
                    {st.session_state.summary}
                </div>
                """, unsafe_allow_html=True)

            # Enhanced suggestion buttons
            st.markdown("**üí° C√¢u h·ªèi g·ª£i √Ω:**")
            suggestion_cols = st.columns(3)
            suggested_questions = [
                "√ù ch√≠nh c·ªßa b√†i vi·∫øt l√† g√¨?",
                "ƒêi·ªÉm quan tr·ªçng nh·∫•t ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p?",
                "T√°c gi·∫£ k·∫øt lu·∫≠n ƒëi·ªÅu g√¨?"
            ]

            # Hi·ªÉn th·ªã c√°c g·ª£i √Ω c√¢u h·ªèi v·ªõi enhanced styling
            for i, (col, question) in enumerate(zip(suggestion_cols, suggested_questions)):
                with col:
                    if st.button(
                        question, 
                        key=f"suggested_q_{i}", 
                        help="Nh·∫•n ƒë·ªÉ s·ª≠ d·ª•ng c√¢u h·ªèi g·ª£i √Ω n√†y",
                        use_container_width=True
                    ):
                        st.session_state.question = question

            # Enhanced question input
            question = st.text_input(
                "üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n", 
                value=st.session_state.get("question", ""),
                placeholder="V√≠ d·ª•: √ù ch√≠nh c·ªßa b√†i vi·∫øt l√† g√¨?",
                key="qa_input"
            )

            if question:
                if st.button("üîç T√¨m c√¢u tr·∫£ l·ªùi", key="answer_question", use_container_width=True):
                    with st.spinner("ü§ñ AI ƒëang t√¨m c√¢u tr·∫£ l·ªùi..."):
                        # Enhanced progress with steps
                        progress_container = st.container()
                        with progress_container:
                            progress_text = st.empty()
                            progress_bar = st.progress(0)
                            
                            steps = ["Ph√¢n t√≠ch c√¢u h·ªèi...", "T√¨m ki·∫øm th√¥ng tin...", "T·∫°o c√¢u tr·∫£ l·ªùi...", "Ho√†n th√†nh!"]
                            
                            for i in range(100):
                                step_index = min(i // 25, len(steps) - 1)
                                progress_text.markdown(f"**{steps[step_index]}** ({i+1}%)")
                                time.sleep(0.01)
                                progress_bar.progress(i + 1)

                        answer = answer_question(question, st.session_state.summary)

                        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi v·ªõi enhanced styling
                        st.markdown("""
                        <div class="fade-in-up">
                            <h3 style="
                                color: #1565c0;
                                font-weight: 700;
                                margin: 2rem 0 1rem 0;
                                display: flex;
                                align-items: center;
                            ">
                                <span style="margin-right: 0.75rem; font-size: 1.5rem;">üí°</span>
                                C√¢u tr·∫£ l·ªùi
                            </h3>
                        </div>
                        """, unsafe_allow_html=True)

                        if isinstance(answer, dict) and 'answer' in answer:
                            qa_result(
                                question=question,
                                answer=answer['answer'],
                                confidence=answer.get('score', None)
                            )
                            st.success("‚úÖ T√¨m th·∫•y c√¢u tr·∫£ l·ªùi!")
                        else:
                            error_box(f"‚ùå L·ªói: {answer}" if isinstance(answer, str) else "Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi.")
        else:
            error_box("‚ö†Ô∏è Vui l√≤ng t·∫°o b·∫£n t√≥m t·∫Øt tr∆∞·ªõc khi s·ª≠ d·ª•ng ch·ª©c nƒÉng h·ªèi ƒë√°p.")

# Enhanced Footer
st.markdown("---")
st.markdown("""
<div class="fade-in-up" style="
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    padding: 2rem;
    margin: 2rem 0;
    text-align: center;
    color: white;
    box-shadow: 0 12px 24px rgba(102, 126, 234, 0.3);
">
    <div style="display: flex; justify-content: center; align-items: center; margin-bottom: 1rem;">
        <span style="font-size: 2rem; margin-right: 1rem;">üöÄ</span>
        <h3 style="margin: 0; font-weight: 700;">AI Document Analyzer</h3>
    </div>
    <p style="
        margin-bottom: 1rem;
        font-size: 1.1rem;
        opacity: 0.9;
        line-height: 1.6;
    ">
        Ph√¢n t√≠ch t√†i li·ªáu th√¥ng minh v·ªõi c√¥ng ngh·ªá AI ti√™n ti·∫øn
    </p>
    <div style="
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        opacity: 0.8;
    ">
        <div style="display: flex; align-items: center;">
            <span style="margin-right: 0.5rem;">ü§ñ</span>
            <span>Powered by Transformers</span>
        </div>
        <div style="display: flex; align-items: center;">
            <span style="margin-right: 0.5rem;">‚ö°</span>
            <span>Fast & Accurate</span>
        </div>
        <div style="display: flex; align-items: center;">
            <span style="margin-right: 0.5rem;">üîê</span>
            <span>Secure & Private</span>
        </div>
    </div>
    <div style="
        font-size: 0.85rem;
        opacity: 0.7;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 1rem;
    ">
        ¬© AI Document Analyzer Team | S·ª≠ d·ª•ng c√¥ng ngh·ªá Transformer & LangChain
    </div>
</div>
""", unsafe_allow_html=True)
